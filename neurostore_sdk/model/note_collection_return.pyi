# coding: utf-8

"""
    neurostore api

    Create studysets for meta-analysis  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: jamesdkent21@gmail.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from neurostore_sdk import schemas  # noqa: F401


class NoteCollectionReturn(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    analysis = schemas.StrSchema
                    
                    
                    class analysis_name(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'analysis_name':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                            )
                    study = schemas.StrSchema
                    
                    
                    class study_name(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'study_name':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                            )
                    annotation = schemas.StrSchema
                    
                    
                    class study_year(
                        schemas.IntBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneDecimalMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[None, decimal.Decimal, int, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'study_year':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                            )
                    
                    
                    class publication(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'publication':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                            )
                    
                    
                    class authors(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'authors':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                            )
                    __annotations__ = {
                        "analysis": analysis,
                        "analysis_name": analysis_name,
                        "study": study,
                        "study_name": study_name,
                        "annotation": annotation,
                        "study_year": study_year,
                        "publication": publication,
                        "authors": authors,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["analysis"]) -> MetaOapg.properties.analysis: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["analysis_name"]) -> MetaOapg.properties.analysis_name: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["study"]) -> MetaOapg.properties.study: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["study_name"]) -> MetaOapg.properties.study_name: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["annotation"]) -> MetaOapg.properties.annotation: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["study_year"]) -> MetaOapg.properties.study_year: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["publication"]) -> MetaOapg.properties.publication: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["authors"]) -> MetaOapg.properties.authors: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["analysis", "analysis_name", "study", "study_name", "annotation", "study_year", "publication", "authors", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["analysis"]) -> typing.Union[MetaOapg.properties.analysis, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["analysis_name"]) -> typing.Union[MetaOapg.properties.analysis_name, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["study"]) -> typing.Union[MetaOapg.properties.study, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["study_name"]) -> typing.Union[MetaOapg.properties.study_name, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["annotation"]) -> typing.Union[MetaOapg.properties.annotation, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["study_year"]) -> typing.Union[MetaOapg.properties.study_year, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["publication"]) -> typing.Union[MetaOapg.properties.publication, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["authors"]) -> typing.Union[MetaOapg.properties.authors, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["analysis", "analysis_name", "study", "study_name", "annotation", "study_year", "publication", "authors", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                analysis: typing.Union[MetaOapg.properties.analysis, str, schemas.Unset] = schemas.unset,
                analysis_name: typing.Union[MetaOapg.properties.analysis_name, None, str, schemas.Unset] = schemas.unset,
                study: typing.Union[MetaOapg.properties.study, str, schemas.Unset] = schemas.unset,
                study_name: typing.Union[MetaOapg.properties.study_name, None, str, schemas.Unset] = schemas.unset,
                annotation: typing.Union[MetaOapg.properties.annotation, str, schemas.Unset] = schemas.unset,
                study_year: typing.Union[MetaOapg.properties.study_year, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                publication: typing.Union[MetaOapg.properties.publication, None, str, schemas.Unset] = schemas.unset,
                authors: typing.Union[MetaOapg.properties.authors, None, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    analysis=analysis,
                    analysis_name=analysis_name,
                    study=study,
                    study_name=study_name,
                    annotation=annotation,
                    study_year=study_year,
                    publication=publication,
                    authors=authors,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                NoteCollectionBase,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NoteCollectionReturn':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from neurostore_sdk.model.note_collection_base import NoteCollectionBase
