# coding: utf-8

"""
    neurostore api

    Create studysets for meta-analysis  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: jamesdkent21@gmail.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from neurostore_sdk import schemas  # noqa: F401


class Entity(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    descriptor of level of analysis for a particular image/point (run, session, subject, group, meta)
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    label = schemas.StrSchema
                    
                    
                    class level(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "run": "RUN",
                                "session": "SESSION",
                                "subject": "SUBJECT",
                                "group": "GROUP",
                                "meta": "META",
                            }
                        
                        @schemas.classproperty
                        def RUN(cls):
                            return cls("run")
                        
                        @schemas.classproperty
                        def SESSION(cls):
                            return cls("session")
                        
                        @schemas.classproperty
                        def SUBJECT(cls):
                            return cls("subject")
                        
                        @schemas.classproperty
                        def GROUP(cls):
                            return cls("group")
                        
                        @schemas.classproperty
                        def META(cls):
                            return cls("meta")
                    analysis = schemas.StrSchema
                    __annotations__ = {
                        "label": label,
                        "level": level,
                        "analysis": analysis,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["level"]) -> MetaOapg.properties.level: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["analysis"]) -> MetaOapg.properties.analysis: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["label", "level", "analysis", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["level"]) -> typing.Union[MetaOapg.properties.level, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["analysis"]) -> typing.Union[MetaOapg.properties.analysis, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["label", "level", "analysis", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
                level: typing.Union[MetaOapg.properties.level, str, schemas.Unset] = schemas.unset,
                analysis: typing.Union[MetaOapg.properties.analysis, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *_args,
                    label=label,
                    level=level,
                    analysis=analysis,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
                UserlessResourceAttributes,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Entity':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from neurostore_sdk.model.userless_resource_attributes import UserlessResourceAttributes
