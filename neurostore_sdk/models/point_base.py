# coding: utf-8

"""
    neurostore api

    Create studysets for meta-analysis  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: jamesdkent21@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist

class PointBase(BaseModel):
    """
    PointBase
    """
    coordinates: Optional[conlist(Union[StrictFloat, StrictInt], max_items=3, min_items=3)] = Field(None, description="Location of the significant coordinate in three dimensional space.")
    space: Optional[StrictStr] = Field(None, description="Template space used to determine coordinate Examples include TAL or MNI.")
    kind: Optional[StrictStr] = Field(None, description="Method of how point was derived (e.g., center of mass)")
    label_id: Optional[StrictStr] = Field(None, description="If the point is associated with an image, this is the value the point takes in that image.")
    __properties = ["coordinates", "space", "kind", "label_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PointBase:
        """Create an instance of PointBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if space (nullable) is None
        # and __fields_set__ contains the field
        if self.space is None and "space" in self.__fields_set__:
            _dict['space'] = None

        # set to None if kind (nullable) is None
        # and __fields_set__ contains the field
        if self.kind is None and "kind" in self.__fields_set__:
            _dict['kind'] = None

        # set to None if label_id (nullable) is None
        # and __fields_set__ contains the field
        if self.label_id is None and "label_id" in self.__fields_set__:
            _dict['label_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PointBase:
        """Create an instance of PointBase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PointBase.parse_obj(obj)

        _obj = PointBase.parse_obj({
            "coordinates": obj.get("coordinates"),
            "space": obj.get("space"),
            "kind": obj.get("kind"),
            "label_id": obj.get("label_id")
        })
        return _obj

