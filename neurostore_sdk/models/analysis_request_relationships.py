# coding: utf-8

"""
    neurostore api

    Create studysets for meta-analysis

    The version of the OpenAPI document: 1.0
    Contact: jamesdkent21@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from neurostore_sdk.models.analysis_request_relationships_conditions import AnalysisRequestRelationshipsConditions
from neurostore_sdk.models.analysis_request_relationships_images import AnalysisRequestRelationshipsImages
from neurostore_sdk.models.analysis_request_relationships_points import AnalysisRequestRelationshipsPoints
from typing import Optional, Set
from typing_extensions import Self

class AnalysisRequestRelationships(BaseModel):
    """
    AnalysisRequestRelationships
    """ # noqa: E501
    study: Optional[StrictStr] = None
    images: Optional[AnalysisRequestRelationshipsImages] = None
    points: Optional[AnalysisRequestRelationshipsPoints] = None
    conditions: Optional[AnalysisRequestRelationshipsConditions] = None
    __properties: ClassVar[List[str]] = ["study", "images", "points", "conditions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnalysisRequestRelationships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of images
        if self.images:
            _dict['images'] = self.images.to_dict()
        # override the default output from pydantic by calling `to_dict()` of points
        if self.points:
            _dict['points'] = self.points.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conditions
        if self.conditions:
            _dict['conditions'] = self.conditions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnalysisRequestRelationships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "study": obj.get("study"),
            "images": AnalysisRequestRelationshipsImages.from_dict(obj["images"]) if obj.get("images") is not None else None,
            "points": AnalysisRequestRelationshipsPoints.from_dict(obj["points"]) if obj.get("points") is not None else None,
            "conditions": AnalysisRequestRelationshipsConditions.from_dict(obj["conditions"]) if obj.get("conditions") is not None else None
        })
        return _obj


