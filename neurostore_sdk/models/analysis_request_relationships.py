# coding: utf-8

"""
    neurostore api

    Create studysets for meta-analysis  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: jamesdkent21@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr
from neurostore_sdk.models.analysis_request_relationships_conditions import AnalysisRequestRelationshipsConditions
from neurostore_sdk.models.analysis_request_relationships_images import AnalysisRequestRelationshipsImages
from neurostore_sdk.models.analysis_request_relationships_points import AnalysisRequestRelationshipsPoints

class AnalysisRequestRelationships(BaseModel):
    """
    AnalysisRequestRelationships
    """
    study: Optional[StrictStr] = None
    images: Optional[AnalysisRequestRelationshipsImages] = None
    points: Optional[AnalysisRequestRelationshipsPoints] = None
    conditions: Optional[AnalysisRequestRelationshipsConditions] = None
    __properties = ["study", "images", "points", "conditions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AnalysisRequestRelationships:
        """Create an instance of AnalysisRequestRelationships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of images
        if self.images:
            _dict['images'] = self.images.to_dict()
        # override the default output from pydantic by calling `to_dict()` of points
        if self.points:
            _dict['points'] = self.points.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conditions
        if self.conditions:
            _dict['conditions'] = self.conditions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AnalysisRequestRelationships:
        """Create an instance of AnalysisRequestRelationships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AnalysisRequestRelationships.parse_obj(obj)

        _obj = AnalysisRequestRelationships.parse_obj({
            "study": obj.get("study"),
            "images": AnalysisRequestRelationshipsImages.from_dict(obj.get("images")) if obj.get("images") is not None else None,
            "points": AnalysisRequestRelationshipsPoints.from_dict(obj.get("points")) if obj.get("points") is not None else None,
            "conditions": AnalysisRequestRelationshipsConditions.from_dict(obj.get("conditions")) if obj.get("conditions") is not None else None
        })
        return _obj

