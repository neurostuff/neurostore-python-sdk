# coding: utf-8

"""
    neurostore api

    Create studysets for meta-analysis  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: jamesdkent21@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, constr
from neurostore_sdk.models.base_study_versions import BaseStudyVersions

class BaseStudyReturn(BaseModel):
    """
    BaseStudyReturn
    """
    metadata: Optional[Dict[str, Any]] = None
    versions: Optional[BaseStudyVersions] = None
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    publication: Optional[StrictStr] = None
    doi: Optional[StrictStr] = None
    pmid: Optional[StrictStr] = None
    authors: Optional[StrictStr] = None
    year: Optional[StrictInt] = None
    level: Optional[StrictStr] = None
    created_at: Optional[datetime] = Field(None, description="time the resource was created on the database")
    updated_at: Optional[StrictStr] = Field(None, description="when was the resource last modified/updated.")
    id: Optional[constr(strict=True, max_length=12, min_length=12)] = Field(None, description="short UUID specifying the location of this resource")
    public: Optional[StrictBool] = Field(True, description="whether the resource is listed in public searches or not")
    user: Optional[StrictStr] = Field(None, description="who owns the resource")
    __properties = ["metadata", "versions", "name", "description", "publication", "doi", "pmid", "authors", "year", "level", "created_at", "updated_at", "id", "public", "user"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BaseStudyReturn:
        """Create an instance of BaseStudyReturn from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "created_at",
                            "updated_at",
                            "user",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of versions
        if self.versions:
            _dict['versions'] = self.versions.to_dict()
        # set to None if metadata (nullable) is None
        # and __fields_set__ contains the field
        if self.metadata is None and "metadata" in self.__fields_set__:
            _dict['metadata'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if publication (nullable) is None
        # and __fields_set__ contains the field
        if self.publication is None and "publication" in self.__fields_set__:
            _dict['publication'] = None

        # set to None if doi (nullable) is None
        # and __fields_set__ contains the field
        if self.doi is None and "doi" in self.__fields_set__:
            _dict['doi'] = None

        # set to None if pmid (nullable) is None
        # and __fields_set__ contains the field
        if self.pmid is None and "pmid" in self.__fields_set__:
            _dict['pmid'] = None

        # set to None if authors (nullable) is None
        # and __fields_set__ contains the field
        if self.authors is None and "authors" in self.__fields_set__:
            _dict['authors'] = None

        # set to None if year (nullable) is None
        # and __fields_set__ contains the field
        if self.year is None and "year" in self.__fields_set__:
            _dict['year'] = None

        # set to None if level (nullable) is None
        # and __fields_set__ contains the field
        if self.level is None and "level" in self.__fields_set__:
            _dict['level'] = None

        # set to None if updated_at (nullable) is None
        # and __fields_set__ contains the field
        if self.updated_at is None and "updated_at" in self.__fields_set__:
            _dict['updated_at'] = None

        # set to None if user (nullable) is None
        # and __fields_set__ contains the field
        if self.user is None and "user" in self.__fields_set__:
            _dict['user'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BaseStudyReturn:
        """Create an instance of BaseStudyReturn from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BaseStudyReturn.parse_obj(obj)

        _obj = BaseStudyReturn.parse_obj({
            "metadata": obj.get("metadata"),
            "versions": BaseStudyVersions.from_dict(obj.get("versions")) if obj.get("versions") is not None else None,
            "name": obj.get("name"),
            "description": obj.get("description"),
            "publication": obj.get("publication"),
            "doi": obj.get("doi"),
            "pmid": obj.get("pmid"),
            "authors": obj.get("authors"),
            "year": obj.get("year"),
            "level": obj.get("level"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "id": obj.get("id"),
            "public": obj.get("public") if obj.get("public") is not None else True,
            "user": obj.get("user")
        })
        return _obj

