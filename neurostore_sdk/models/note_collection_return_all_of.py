# coding: utf-8

"""
    neurostore api

    Create studysets for meta-analysis  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: jamesdkent21@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictInt, StrictStr

class NoteCollectionReturnAllOf(BaseModel):
    """
    NoteCollectionReturnAllOf
    """
    analysis: Optional[StrictStr] = None
    analysis_name: Optional[StrictStr] = None
    study: Optional[StrictStr] = None
    study_name: Optional[StrictStr] = None
    annotation: Optional[StrictStr] = None
    study_year: Optional[StrictInt] = None
    publication: Optional[StrictStr] = None
    authors: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    __properties = ["analysis", "analysis_name", "study", "study_name", "annotation", "study_year", "publication", "authors", "id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NoteCollectionReturnAllOf:
        """Create an instance of NoteCollectionReturnAllOf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "analysis",
                            "analysis_name",
                            "study",
                            "study_name",
                            "annotation",
                            "study_year",
                            "publication",
                            "authors",
                          },
                          exclude_none=True)
        # set to None if analysis_name (nullable) is None
        # and __fields_set__ contains the field
        if self.analysis_name is None and "analysis_name" in self.__fields_set__:
            _dict['analysis_name'] = None

        # set to None if study_name (nullable) is None
        # and __fields_set__ contains the field
        if self.study_name is None and "study_name" in self.__fields_set__:
            _dict['study_name'] = None

        # set to None if study_year (nullable) is None
        # and __fields_set__ contains the field
        if self.study_year is None and "study_year" in self.__fields_set__:
            _dict['study_year'] = None

        # set to None if publication (nullable) is None
        # and __fields_set__ contains the field
        if self.publication is None and "publication" in self.__fields_set__:
            _dict['publication'] = None

        # set to None if authors (nullable) is None
        # and __fields_set__ contains the field
        if self.authors is None and "authors" in self.__fields_set__:
            _dict['authors'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NoteCollectionReturnAllOf:
        """Create an instance of NoteCollectionReturnAllOf from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NoteCollectionReturnAllOf.parse_obj(obj)

        _obj = NoteCollectionReturnAllOf.parse_obj({
            "analysis": obj.get("analysis"),
            "analysis_name": obj.get("analysis_name"),
            "study": obj.get("study"),
            "study_name": obj.get("study_name"),
            "annotation": obj.get("annotation"),
            "study_year": obj.get("study_year"),
            "publication": obj.get("publication"),
            "authors": obj.get("authors"),
            "id": obj.get("id")
        })
        return _obj

