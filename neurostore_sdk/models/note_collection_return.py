# coding: utf-8

"""
    neurostore api

    Create studysets for meta-analysis

    The version of the OpenAPI document: 1.0
    Contact: jamesdkent21@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NoteCollectionReturn(BaseModel):
    """
    NoteCollectionReturn
    """ # noqa: E501
    note: Optional[Dict[str, Any]] = Field(default=None, description="The note will contain all note_keys as keys and have a value of either null or the value type specified in note_keys.")
    analysis: Optional[StrictStr] = None
    analysis_name: Optional[StrictStr] = None
    study: Optional[StrictStr] = None
    study_name: Optional[StrictStr] = None
    annotation: Optional[StrictStr] = None
    study_year: Optional[StrictInt] = None
    publication: Optional[StrictStr] = None
    authors: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["note", "analysis", "analysis_name", "study", "study_name", "annotation", "study_year", "publication", "authors", "id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NoteCollectionReturn from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "analysis",
            "analysis_name",
            "study",
            "study_name",
            "annotation",
            "study_year",
            "publication",
            "authors",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if note (nullable) is None
        # and model_fields_set contains the field
        if self.note is None and "note" in self.model_fields_set:
            _dict['note'] = None

        # set to None if analysis_name (nullable) is None
        # and model_fields_set contains the field
        if self.analysis_name is None and "analysis_name" in self.model_fields_set:
            _dict['analysis_name'] = None

        # set to None if study_name (nullable) is None
        # and model_fields_set contains the field
        if self.study_name is None and "study_name" in self.model_fields_set:
            _dict['study_name'] = None

        # set to None if study_year (nullable) is None
        # and model_fields_set contains the field
        if self.study_year is None and "study_year" in self.model_fields_set:
            _dict['study_year'] = None

        # set to None if publication (nullable) is None
        # and model_fields_set contains the field
        if self.publication is None and "publication" in self.model_fields_set:
            _dict['publication'] = None

        # set to None if authors (nullable) is None
        # and model_fields_set contains the field
        if self.authors is None and "authors" in self.model_fields_set:
            _dict['authors'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NoteCollectionReturn from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "note": obj.get("note"),
            "analysis": obj.get("analysis"),
            "analysis_name": obj.get("analysis_name"),
            "study": obj.get("study"),
            "study_name": obj.get("study_name"),
            "annotation": obj.get("annotation"),
            "study_year": obj.get("study_year"),
            "publication": obj.get("publication"),
            "authors": obj.get("authors"),
            "id": obj.get("id")
        })
        return _obj


