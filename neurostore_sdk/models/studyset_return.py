# coding: utf-8

"""
    neurostore api

    Create studysets for meta-analysis

    The version of the OpenAPI document: 1.0
    Contact: jamesdkent21@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from neurostore_sdk.models.studyset_return_relationships_studies import StudysetReturnRelationshipsStudies
from typing import Optional, Set
from typing_extensions import Self

class StudysetReturn(BaseModel):
    """
    StudysetReturn
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Descriptive and human readable name of the studyset.")
    description: Optional[StrictStr] = Field(default=None, description="A longform description of the studyset.")
    publication: Optional[StrictStr] = Field(default=None, description="The journal/source the studyset is connected to if the studyset was published.")
    doi: Optional[StrictStr] = Field(default=None, description="A DOI connected to the published studyset (may change to being automatically created so each studyset connected to a successful meta-analysis gets a DOI).")
    pmid: Optional[StrictStr] = Field(default=None, description="If the article connected to the studyset was published on PubMed, then link the ID here.")
    created_at: Optional[datetime] = Field(default=None, description="time the resource was created on the database")
    updated_at: Optional[StrictStr] = Field(default=None, description="when the resource was last modified/updated.")
    id: Optional[Annotated[str, Field(min_length=12, strict=True, max_length=30)]] = Field(default=None, description="short UUID specifying the location of this resource")
    public: Optional[StrictBool] = Field(default=True, description="whether the resource is listed in public searches or not")
    user: Optional[StrictStr] = Field(default=None, description="who owns the resource")
    username: Optional[StrictStr] = Field(default=None, description="human readable username")
    source: Optional[StrictStr] = None
    source_id: Optional[StrictStr] = None
    source_updated_at: Optional[StrictStr] = None
    studies: Optional[StudysetReturnRelationshipsStudies] = None
    level: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["name", "description", "publication", "doi", "pmid", "created_at", "updated_at", "id", "public", "user", "username", "source", "source_id", "source_updated_at", "studies", "level"]

    @field_validator('level')
    def level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['group', 'meta']):
            raise ValueError("must be one of enum values ('group', 'meta')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StudysetReturn from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "updated_at",
            "user",
            "source_updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of studies
        if self.studies:
            _dict['studies'] = self.studies.to_dict()
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if publication (nullable) is None
        # and model_fields_set contains the field
        if self.publication is None and "publication" in self.model_fields_set:
            _dict['publication'] = None

        # set to None if doi (nullable) is None
        # and model_fields_set contains the field
        if self.doi is None and "doi" in self.model_fields_set:
            _dict['doi'] = None

        # set to None if pmid (nullable) is None
        # and model_fields_set contains the field
        if self.pmid is None and "pmid" in self.model_fields_set:
            _dict['pmid'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if user (nullable) is None
        # and model_fields_set contains the field
        if self.user is None and "user" in self.model_fields_set:
            _dict['user'] = None

        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        # set to None if source (nullable) is None
        # and model_fields_set contains the field
        if self.source is None and "source" in self.model_fields_set:
            _dict['source'] = None

        # set to None if source_id (nullable) is None
        # and model_fields_set contains the field
        if self.source_id is None and "source_id" in self.model_fields_set:
            _dict['source_id'] = None

        # set to None if source_updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.source_updated_at is None and "source_updated_at" in self.model_fields_set:
            _dict['source_updated_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StudysetReturn from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "publication": obj.get("publication"),
            "doi": obj.get("doi"),
            "pmid": obj.get("pmid"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "id": obj.get("id"),
            "public": obj.get("public") if obj.get("public") is not None else True,
            "user": obj.get("user"),
            "username": obj.get("username"),
            "source": obj.get("source"),
            "source_id": obj.get("source_id"),
            "source_updated_at": obj.get("source_updated_at"),
            "studies": StudysetReturnRelationshipsStudies.from_dict(obj["studies"]) if obj.get("studies") is not None else None,
            "level": obj.get("level")
        })
        return _obj


