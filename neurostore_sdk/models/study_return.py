# coding: utf-8

"""
    neurostore api

    Create studysets for meta-analysis

    The version of the OpenAPI document: 1.0
    Contact: jamesdkent21@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from neurostore_sdk.models.study_return_all_of_studysets import StudyReturnAllOfStudysets
from neurostore_sdk.models.study_return_relationships_analyses import StudyReturnRelationshipsAnalyses
from typing import Optional, Set
from typing_extensions import Self

class StudyReturn(BaseModel):
    """
    StudyReturn
    """ # noqa: E501
    doi: Optional[StrictStr] = Field(default=None, description="Digital object identifier of the study.")
    name: Optional[StrictStr] = Field(default=None, description="Title of the study.")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Metadata associated with the study not covered by the other study attributes.")
    description: Optional[StrictStr] = Field(default=None, description="Long form description of the study, typically the abstract.")
    publication: Optional[StrictStr] = Field(default=None, description="The journal/place of publication for the study.")
    pmid: Optional[StrictStr] = Field(default=None, description="If the study was published on PubMed, place the PubMed ID here.")
    authors: Optional[StrictStr] = Field(default=None, description="The authors on the publication of this study.")
    year: Optional[Annotated[int, Field(le=9999, strict=True, ge=0)]] = Field(default=None, description="The year this study was published.")
    created_at: Optional[datetime] = Field(default=None, description="time the resource was created on the database")
    updated_at: Optional[StrictStr] = Field(default=None, description="when the resource was last modified/updated.")
    id: Optional[Annotated[str, Field(min_length=12, strict=True, max_length=30)]] = Field(default=None, description="short UUID specifying the location of this resource")
    public: Optional[StrictBool] = Field(default=True, description="whether the resource is listed in public searches or not")
    user: Optional[StrictStr] = Field(default=None, description="who owns the resource")
    username: Optional[StrictStr] = Field(default=None, description="human readable username")
    source: Optional[StrictStr] = None
    source_id: Optional[StrictStr] = None
    source_updated_at: Optional[StrictStr] = None
    analyses: Optional[StudyReturnRelationshipsAnalyses] = None
    studysets: Optional[List[StudyReturnAllOfStudysets]] = None
    has_coordinates: Optional[StrictBool] = None
    has_images: Optional[StrictBool] = None
    base_study: Optional[StrictStr] = None
    pmcid: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["doi", "name", "metadata", "description", "publication", "pmid", "authors", "year", "created_at", "updated_at", "id", "public", "user", "username", "source", "source_id", "source_updated_at", "analyses", "studysets", "has_coordinates", "has_images", "base_study", "pmcid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StudyReturn from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "updated_at",
            "user",
            "source_updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of analyses
        if self.analyses:
            _dict['analyses'] = self.analyses.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in studysets (list)
        _items = []
        if self.studysets:
            for _item in self.studysets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['studysets'] = _items
        # set to None if doi (nullable) is None
        # and model_fields_set contains the field
        if self.doi is None and "doi" in self.model_fields_set:
            _dict['doi'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if publication (nullable) is None
        # and model_fields_set contains the field
        if self.publication is None and "publication" in self.model_fields_set:
            _dict['publication'] = None

        # set to None if pmid (nullable) is None
        # and model_fields_set contains the field
        if self.pmid is None and "pmid" in self.model_fields_set:
            _dict['pmid'] = None

        # set to None if authors (nullable) is None
        # and model_fields_set contains the field
        if self.authors is None and "authors" in self.model_fields_set:
            _dict['authors'] = None

        # set to None if year (nullable) is None
        # and model_fields_set contains the field
        if self.year is None and "year" in self.model_fields_set:
            _dict['year'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if user (nullable) is None
        # and model_fields_set contains the field
        if self.user is None and "user" in self.model_fields_set:
            _dict['user'] = None

        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        # set to None if source (nullable) is None
        # and model_fields_set contains the field
        if self.source is None and "source" in self.model_fields_set:
            _dict['source'] = None

        # set to None if source_id (nullable) is None
        # and model_fields_set contains the field
        if self.source_id is None and "source_id" in self.model_fields_set:
            _dict['source_id'] = None

        # set to None if source_updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.source_updated_at is None and "source_updated_at" in self.model_fields_set:
            _dict['source_updated_at'] = None

        # set to None if base_study (nullable) is None
        # and model_fields_set contains the field
        if self.base_study is None and "base_study" in self.model_fields_set:
            _dict['base_study'] = None

        # set to None if pmcid (nullable) is None
        # and model_fields_set contains the field
        if self.pmcid is None and "pmcid" in self.model_fields_set:
            _dict['pmcid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StudyReturn from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "doi": obj.get("doi"),
            "name": obj.get("name"),
            "metadata": obj.get("metadata"),
            "description": obj.get("description"),
            "publication": obj.get("publication"),
            "pmid": obj.get("pmid"),
            "authors": obj.get("authors"),
            "year": obj.get("year"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "id": obj.get("id"),
            "public": obj.get("public") if obj.get("public") is not None else True,
            "user": obj.get("user"),
            "username": obj.get("username"),
            "source": obj.get("source"),
            "source_id": obj.get("source_id"),
            "source_updated_at": obj.get("source_updated_at"),
            "analyses": StudyReturnRelationshipsAnalyses.from_dict(obj["analyses"]) if obj.get("analyses") is not None else None,
            "studysets": [StudyReturnAllOfStudysets.from_dict(_item) for _item in obj["studysets"]] if obj.get("studysets") is not None else None,
            "has_coordinates": obj.get("has_coordinates"),
            "has_images": obj.get("has_images"),
            "base_study": obj.get("base_study"),
            "pmcid": obj.get("pmcid")
        })
        return _obj


