# coding: utf-8

"""
    neurostore api

    Create studysets for meta-analysis

    The version of the OpenAPI document: 1.0
    Contact: jamesdkent21@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PipelineEmbedding(BaseModel):
    """
    PipelineEmbedding
    """ # noqa: E501
    created_at: Optional[datetime] = Field(default=None, description="time the resource was created on the database")
    updated_at: Optional[StrictStr] = Field(default=None, description="when the resource was last modified/updated.")
    config_id: StrictStr
    base_study_id: Optional[StrictStr] = None
    date_executed: Optional[datetime] = None
    file_inputs: Optional[Dict[str, Any]] = None
    status: StrictStr = Field(description="Current status of the pipeline execution (e.g. SUCCESS, FAILURE, ERROR, UNKNOWN)")
    embedding: List[Union[StrictFloat, StrictInt]]
    __properties: ClassVar[List[str]] = ["created_at", "updated_at", "config_id", "base_study_id", "date_executed", "file_inputs", "status", "embedding"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PipelineEmbedding from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if base_study_id (nullable) is None
        # and model_fields_set contains the field
        if self.base_study_id is None and "base_study_id" in self.model_fields_set:
            _dict['base_study_id'] = None

        # set to None if date_executed (nullable) is None
        # and model_fields_set contains the field
        if self.date_executed is None and "date_executed" in self.model_fields_set:
            _dict['date_executed'] = None

        # set to None if file_inputs (nullable) is None
        # and model_fields_set contains the field
        if self.file_inputs is None and "file_inputs" in self.model_fields_set:
            _dict['file_inputs'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PipelineEmbedding from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "config_id": obj.get("config_id"),
            "base_study_id": obj.get("base_study_id"),
            "date_executed": obj.get("date_executed"),
            "file_inputs": obj.get("file_inputs"),
            "status": obj.get("status"),
            "embedding": obj.get("embedding")
        })
        return _obj


