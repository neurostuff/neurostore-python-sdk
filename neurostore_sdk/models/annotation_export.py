# coding: utf-8

"""
    neurostore api

    Create studysets for meta-analysis  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: jamesdkent21@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr

class AnnotationExport(BaseModel):
    """
    exporting an annotation as a CSV for easier editing
    """
    metadata: Optional[Dict[str, Any]] = None
    annotation_csv: StrictStr = Field(..., description="annotation object expressed as a CSV")
    __properties = ["metadata", "annotation_csv"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AnnotationExport:
        """Create an instance of AnnotationExport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "metadata",
                          },
                          exclude_none=True)
        # set to None if metadata (nullable) is None
        # and __fields_set__ contains the field
        if self.metadata is None and "metadata" in self.__fields_set__:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AnnotationExport:
        """Create an instance of AnnotationExport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AnnotationExport.parse_obj(obj)

        _obj = AnnotationExport.parse_obj({
            "metadata": obj.get("metadata"),
            "annotation_csv": obj.get("annotation_csv")
        })
        return _obj

