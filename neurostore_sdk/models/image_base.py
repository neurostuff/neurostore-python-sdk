# coding: utf-8

"""
    neurostore api

    Create studysets for meta-analysis  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: jamesdkent21@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr

class ImageBase(BaseModel):
    """
    ImageBase
    """
    metadata: Optional[Dict[str, Any]] = Field(None, description="Metadata about image such as software and version used and other relevant data about how the image was produced.")
    url: Optional[StrictStr] = Field(None, description="URL to image file.")
    filename: Optional[StrictStr] = Field(None, description="Name of the image file.")
    space: Optional[StrictStr] = Field(None, description="The template space the image is in (e.g., MNI ")
    value_type: Optional[StrictStr] = Field(None, description="The values the image represents. For example, T-statistic or Z-statistic, or Betas.")
    add_date: Optional[datetime] = Field(None, description="Date the image was added.")
    __properties = ["metadata", "url", "filename", "space", "value_type", "add_date"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ImageBase:
        """Create an instance of ImageBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "add_date",
                          },
                          exclude_none=True)
        # set to None if metadata (nullable) is None
        # and __fields_set__ contains the field
        if self.metadata is None and "metadata" in self.__fields_set__:
            _dict['metadata'] = None

        # set to None if url (nullable) is None
        # and __fields_set__ contains the field
        if self.url is None and "url" in self.__fields_set__:
            _dict['url'] = None

        # set to None if filename (nullable) is None
        # and __fields_set__ contains the field
        if self.filename is None and "filename" in self.__fields_set__:
            _dict['filename'] = None

        # set to None if space (nullable) is None
        # and __fields_set__ contains the field
        if self.space is None and "space" in self.__fields_set__:
            _dict['space'] = None

        # set to None if value_type (nullable) is None
        # and __fields_set__ contains the field
        if self.value_type is None and "value_type" in self.__fields_set__:
            _dict['value_type'] = None

        # set to None if add_date (nullable) is None
        # and __fields_set__ contains the field
        if self.add_date is None and "add_date" in self.__fields_set__:
            _dict['add_date'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ImageBase:
        """Create an instance of ImageBase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ImageBase.parse_obj(obj)

        _obj = ImageBase.parse_obj({
            "metadata": obj.get("metadata"),
            "url": obj.get("url"),
            "filename": obj.get("filename"),
            "space": obj.get("space"),
            "value_type": obj.get("value_type"),
            "add_date": obj.get("add_date")
        })
        return _obj

